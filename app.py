import streamlit as st
import pandas as pd
import plotly.express as px
from supabase import create_client, Client
from datetime import datetime

# --- CONFIGURA√á√ÉO DA P√ÅGINA E SUPABASE ---

# Configura o layout da p√°gina para ser mais largo
st.set_page_config(layout="wide", page_title="Gerenciador de Troca de Cartuchos")

# Inicializa a conex√£o com o Supabase usando as credenciais do secrets.toml
@st.cache_resource
def init_connection():
    url = st.secrets["supabase"]["url"]
    key = st.secrets["supabase"]["key"]
    return create_client(url, key)

supabase = init_connection()

# --- FUN√á√ïES AUXILIARES ---

# Fun√ß√£o para buscar todos os usu√°rios
def get_users():
    response = supabase.table('usuarios').select('id, nome').order('nome').execute()
    return response.data

# Fun√ß√£o para buscar todos os registros de troca com o nome do usu√°rio
def get_change_logs():
    # Este select √© poderoso: ele pega tudo de 'trocas_cartucho' E o campo 'nome' da tabela 'usuarios' relacionada
    response = supabase.table('trocas_cartucho').select('*, usuarios(nome)').order('data_troca', desc=True).execute()
    return response.data

# --- INTERFACE DA APLICA√á√ÉO ---

st.title("üñ®Ô∏è Gerenciador de Troca de Cartuchos")
st.markdown("---")

# --- BARRA LATERAL PARA NAVEGA√á√ÉO ---
st.sidebar.title("Menu")
page = st.sidebar.radio("Selecione uma p√°gina", ["Registrar Troca", "Dashboard de An√°lise", "Gerenciar Usu√°rios"])

# --- P√ÅGINA: REGISTRAR TROCA ---
if page == "Registrar Troca":
    st.header("Registrar uma Nova Troca de Cartucho")

    # Busca os usu√°rios para popular o selectbox
    users = get_users()
    user_names = {user['nome']: user['id'] for user in users} # Dicion√°rio para mapear nome -> id

    if not users:
        st.warning("Nenhum setor cadastrado. Por favor, adicione um novo setor na p√°gina 'Gerenciar Usu√°rios' primeiro.")
    else:
        with st.form("registro_troca_form"):
            selected_user_name = st.selectbox("Selecione o Setor:", options=user_names.keys())
            change_date = st.date_input("Data da Troca:", datetime.now())
            
            submitted = st.form_submit_button("Registrar Troca")

            if submitted:
                # Pega o ID do usu√°rio selecionado
                user_id = user_names[selected_user_name]
                
                # Formata a data para o formato YYYY-MM-DD
                formatted_date = change_date.strftime("%Y-%m-%d")

                # Insere os dados na tabela 'trocas_cartucho'
                try:
                    supabase.table('trocas_cartucho').insert({
                        'usuario_id': user_id,
                        'data_troca': formatted_date
                    }).execute()
                    st.success(f"Troca registrada com sucesso para {selected_user_name} em {change_date.strftime('%d/%m/%Y')}!")
                except Exception as e:
                    st.error(f"Ocorreu um erro ao registrar a troca: {e}")


# --- P√ÅGINA: DASHBOARD DE AN√ÅLISE ---
elif page == "Dashboard de An√°lise":
    st.header("Dashboard de An√°lise de Trocas")

    logs = get_change_logs()

    if not logs:
        st.info("Ainda n√£o h√° registros de troca para exibir.")
    else:
        # Processa os dados para o DataFrame do Pandas
        processed_logs = []
        for log in logs:
            processed_logs.append({
                'ID Troca': log['id'],
                'Data': log['data_troca'],
                # CORRE√á√ÉO IMPORTANTE: Alterado de 'nome' para 'name'
                'Usu√°rio': log['usuarios']['nome'] if log.get('usuarios') else 'Usu√°rio Desconhecido'
            })
        
        df = pd.DataFrame(processed_logs)
        df['Data'] = pd.to_datetime(df['Data'])
        df = df.sort_values(by='Data', ascending=False)

        # --- IMPLEMENTA√á√ÉO DO FILTRO DE M√äS ---
        st.sidebar.markdown("---")
        st.sidebar.header("Filtros do Dashboard")

        # Cria uma coluna 'AnoM√™s' para usar no filtro
        df['AnoM√™s'] = df['Data'].dt.strftime('%Y-%m')
        
        # Cria a lista de op√ß√µes para o filtro, come√ßando com "Todos"
        lista_meses = sorted(df['AnoM√™s'].unique(), reverse=True)
        lista_meses.insert(0, "Todos")

        # Cria o widget de sele√ß√£o na barra lateral
        mes_selecionado = st.sidebar.selectbox(
            "Filtrar Setor por M√™s/Ano:",
            options=lista_meses
        )

        # Filtra os dados com base na sele√ß√£o
        if mes_selecionado == "Todos":
            df_filtrado = df
        else:
            df_filtrado = df[df['AnoM√™s'] == mes_selecionado]
        
        # --- FIM DA IMPLEMENTA√á√ÉO DO FILTRO ---

        st.markdown("### Gr√°ficos de An√°lise")
        
        col1, col2 = st.columns(2)

        with col1:
            # Gr√°fico 1: Total de trocas por usu√°rio (agora usa df_filtrado)
            st.subheader("Total de Trocas por Setor")

            if not df_filtrado.empty:
                user_counts = df_filtrado['Usu√°rio'].value_counts().reset_index()
                user_counts.columns = ['Usu√°rio', 'Total de Trocas']
                
                # T√≠tulo din√¢mico para o gr√°fico
                titulo_grafico_bar = f"Quem mais trocou em {mes_selecionado}" if mes_selecionado != "Todos" else "Quem mais troca cartuchos (Geral)"
                
                fig_bar = px.bar(user_counts, x='Usu√°rio', y='Total de Trocas', 
                                 title=titulo_grafico_bar,
                                 labels={'Usu√°rio': 'Nome do Usu√°rio', 'Total de Trocas': 'Quantidade'},
                                 text='Total de Trocas')
                fig_bar.update_traces(textposition='outside')
                st.plotly_chart(fig_bar, use_container_width=True)
            else:
                st.warning("Nenhum registro encontrado para o per√≠odo selecionado.")

        with col2:
            # Gr√°fico 2: Trocas ao longo do tempo (usa o df original para mostrar a tend√™ncia geral)
            st.subheader("Trocas ao Longo do Tempo")
            df['M√™s'] = df['Data'].dt.to_period('M').astype(str)
            monthly_changes = df.groupby('M√™s').size().reset_index(name='Quantidade')
            
            fig_line = px.line(monthly_changes.sort_values(by='M√™s'), x='M√™s', y='Quantidade', 
                               title="Volume de Trocas por M√™s",
                               markers=True,
                               labels={'M√™s': 'M√™s/Ano', 'Quantidade': 'N¬∫ de Trocas'})
            st.plotly_chart(fig_line, use_container_width=True)

        st.markdown("---")
        
        # T√≠tulo din√¢mico para a tabela de hist√≥rico
        titulo_historico = f"Hist√≥rico de Trocas para {mes_selecionado}" if mes_selecionado != "Todos" else "Hist√≥rico Completo de Trocas"
        st.subheader(titulo_historico)

        # Exibe o DataFrame filtrado
        st.dataframe(
            df_filtrado[['Data', 'Usu√°rio']].reset_index(drop=True), 
            use_container_width=True
        )


# --- P√ÅGINA: GERENCIAR USU√ÅRIOS ---
elif page == "Gerenciar Usu√°rios":
    st.header("Gerenciar Usu√°rios")

    with st.form("novo_usuario_form"):
        new_user_name = st.text_input("Nome do Novo Usu√°rio:")
        submitted = st.form_submit_button("Adicionar Usu√°rio")

        if submitted and new_user_name:
            try:
                # Verifica se o usu√°rio j√° existe
                existing_users = get_users()
                if any(user['nome'].lower() == new_user_name.lower() for user in existing_users):
                    st.warning(f"Usu√°rio '{new_user_name}' j√° existe!")
                else:
                    supabase.table('usuarios').insert({'nome': new_user_name}).execute()
                    st.success(f"Usu√°rio '{new_user_name}' adicionado com sucesso!")
            except Exception as e:
                st.error(f"Ocorreu um erro ao adicionar o usu√°rio: {e}")

    st.markdown("---")
    st.subheader("Lista de Usu√°rios Cadastrados")
    
    users_data = get_users()
    if users_data:
        df_users = pd.DataFrame(users_data)[['nome']]
        df_users.rename(columns={'nome': 'Nome do Usu√°rio'}, inplace=True)
        st.dataframe(df_users, use_container_width=True)
    else:
        st.info("Nenhum usu√°rio cadastrado.")